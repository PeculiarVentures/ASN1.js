"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[3863],{9200:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"examples/validate-asn-against-pre-defined-schema","title":"Validate ASN.1 against pre-defined schema","description":"","source":"@site/docs/examples/validate-asn-against-pre-defined-schema.mdx","sourceDirName":"examples","slug":"/examples/validate-asn-against-pre-defined-schema","permalink":"/docs/examples/validate-asn-against-pre-defined-schema","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"examples","previous":{"title":"Use \\"internal schemas\\" for primitively encoded data types","permalink":"/docs/examples/use-internal-schemas-for-primitively-encoded-data-types"}}');var i=n(4848),t=n(8453),r=n(3457);const d='import * as asn1js from \'asn1js\';\n\nvar asn1_schema = new asn1js.Sequence({\n  name: "block1",\n  value: [\n    new asn1js.Null({\n      name: "block2"\n    }),\n    new asn1js.Integer({\n      name: "block3",\n      optional: true // This block is absent inside data, but it\'s "optional". Hence verification against the schema will be passed.\n    })\n  ]\n});\n\nvar variant1 = asn1js.verifySchema(encoded_sequence, asn1_schema); // Verify schema together with decoding of raw data\nvar variant1_verified = variant1.verified;\nvar variant1_result = variant1.result; // Verified decoded data with all block names inside\n',l={},c="Validate ASN.1 against pre-defined schema",o={},m=[];function h(e){const a={h1:"h1",header:"header",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"validate-asn1-against-pre-defined-schema",children:"Validate ASN.1 against pre-defined schema"})}),"\n",(0,i.jsx)(r.A,{language:"ts",children:d})]})}function p(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);