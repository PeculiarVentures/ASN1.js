"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3863],{288:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>m});var s=n(4848),i=n(8453),t=n(1432);const r='import * as asn1js from \'asn1js\';\n\nvar asn1_schema = new asn1js.Sequence({\n  name: "block1",\n  value: [\n    new asn1js.Null({\n      name: "block2"\n    }),\n    new asn1js.Integer({\n      name: "block3",\n      optional: true // This block is absent inside data, but it\'s "optional". Hence verification against the schema will be passed.\n    })\n  ]\n});\n\nvar variant1 = org.pkijs.verifySchema(encoded_sequence, asn1_schema); // Verify schema together with decoding of raw data\nvar variant1_verified = variant1.verified;\nvar variant1_result = variant1.result; // Verified decoded data with all block names inside\n',d={},c="Validate ASN.1 against pre-defined schema",l={id:"examples/validate-asn-against-pre-defined-schema",title:"Validate ASN.1 against pre-defined schema",description:"",source:"@site/docs/examples/validate-asn-against-pre-defined-schema.mdx",sourceDirName:"examples",slug:"/examples/validate-asn-against-pre-defined-schema",permalink:"/docs/examples/validate-asn-against-pre-defined-schema",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:'Use "internal schemas" for primitively encoded data types',permalink:"/docs/examples/use-internal-schemas-for-primitively-encoded-data-types"}},o={},m=[];function p(e){const a={h1:"h1",header:"header",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"validate-asn1-against-pre-defined-schema",children:"Validate ASN.1 against pre-defined schema"})}),"\n",(0,s.jsx)(t.A,{language:"ts",children:r})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);