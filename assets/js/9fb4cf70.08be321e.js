"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[8374],{7239:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"examples/use-internal-schemas-for-primitively-encoded-data-types","title":"Use \\"internal schemas\\" for primitively encoded data types","description":"","source":"@site/docs/examples/use-internal-schemas-for-primitively-encoded-data-types.mdx","sourceDirName":"examples","slug":"/examples/use-internal-schemas-for-primitively-encoded-data-types","permalink":"/docs/examples/use-internal-schemas-for-primitively-encoded-data-types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"examples","previous":{"title":"Create new ASN.1 structures","permalink":"/docs/examples/create-new-asn-structures"},"next":{"title":"Validate ASN.1 against pre-defined schema","permalink":"/docs/examples/validate-asn-against-pre-defined-schema"}}');var s=n(4848),r=n(8453),i=n(3457);const c='import * as asn1js from \'asn1js\';\n\nvar primitive_octetstring = new asn1js.OctetString({ valueHex: encoded_sequence }); // Create a primitively encoded OctetString where internal data is an encoded Sequence\n\nvar asn1_schema_internal = new asn1js.OctetString({\n  name: "outer_block",\n  primitiveSchema: new asn1js.Sequence({\n    name: "block1",\n    value: [\n      new asn1js.Null({\n        name: "block2"\n      })\n    ]\n  })\n});\n\nvar variant6 = asn1js.compareSchema(primitive_octetstring, primitive_octetstring, asn1_schema_internal);\nvar variant6_verified = variant4.verified;\nvar variant6_block1_tag_num = variant6.result.block1.idBlock.tagNumber;\nvar variant6_block2_tag_num = variant6.result.block2.idBlock.tagNumber;\n',l={},d='Use "internal schemas" for primitively encoded data types',o={},m=[];function p(e){const a={h1:"h1",header:"header",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"use-internal-schemas-for-primitively-encoded-data-types",children:'Use "internal schemas" for primitively encoded data types'})}),"\n",(0,s.jsx)(i.A,{language:"ts",children:c})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);