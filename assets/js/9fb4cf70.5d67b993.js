"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3640],{3162:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>d,toc:()=>m});var t=a(5893),s=a(1151),i=a(9286);const r='import * as asn1js from \'asn1js\';\n\nvar primitive_octetstring = new asn1js.OctetString({ valueHex: encoded_sequence }); // Create a primitively encoded OctetString where internal data is an encoded Sequence\n\nvar asn1_schema_internal = new asn1js.OctetString({\n  name: "outer_block",\n  primitiveSchema: new asn1js.Sequence({\n    name: "block1",\n    value: [\n      new asn1js.Null({\n        name: "block2"\n      })\n    ]\n  })\n});\n\nvar variant6 = org.pkijs.compareSchema(primitive_octetstring, primitive_octetstring, asn1_schema_internal);\nvar variant6_verified = variant4.verified;\nvar variant6_block1_tag_num = variant6.result.block1.idBlock.tagNumber;\nvar variant6_block2_tag_num = variant6.result.block2.idBlock.tagNumber;\n',c={},l='Use "internal schemas" for primitively encoded data types',d={id:"examples/use-internal-schemas-for-primitively-encoded-data-types",title:'Use "internal schemas" for primitively encoded data types',description:"",source:"@site/docs/examples/use-internal-schemas-for-primitively-encoded-data-types.mdx",sourceDirName:"examples",slug:"/examples/use-internal-schemas-for-primitively-encoded-data-types",permalink:"/docs/examples/use-internal-schemas-for-primitively-encoded-data-types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:"Create new ASN.1 structures",permalink:"/docs/examples/create-new-asn-structures"},next:{title:"Validate ASN.1 against pre-defined schema",permalink:"/docs/examples/validate-asn-against-pre-defined-schema"}},o={},m=[];function p(e){const n={h1:"h1",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"use-internal-schemas-for-primitively-encoded-data-types",children:'Use "internal schemas" for primitively encoded data types'}),"\n",(0,t.jsx)(i.Z,{language:"ts",children:r})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);